<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tesigners</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 15 Apr 2019 22:21:48 +0900</pubDate>
    <lastBuildDate>Mon, 15 Apr 2019 22:21:48 +0900</lastBuildDate>
    <generator>Jekyll v3.7.2</generator>
    
      <item>
        <title>Running X Window app from docker container</title>
        <description>&lt;p&gt;Server에서 개발을 하다보면 필요한 패키지를 설치해야 하거나, 사용해보고 싶은 서비스를 설치하거나 자신에게 맞는 개발 환경을 구성하고 싶을 때가 있다. 이 때마다 관리자에게 요청을 할 수도 없고, 하더라도 거부당 할 수 있다.&lt;/p&gt;

&lt;p&gt;그래서 배포를 위해 docker를 사용하기도 하지만, 개발환경을 구성하기 위해 더 많이 사용하고 있다.&lt;/p&gt;

&lt;p&gt;개인적인 기호겠지만, 서버 호스트에는 최소한의 공통 package만 설치, docker권한을 부여 후, 나머지는 customize된 환경을 사용할 수 있도록 하는 것이 서버의 안정성 및 사용성에 가장 좋은 운영 방안인 것 같다.&lt;/p&gt;

&lt;p&gt;간혹 X Window GUI app을 docker에 설치해 사용해야 하는 경우가 있는데, docker container를 만들 때 지정하는 option만으로 docker container의 X window app을 host에 띄울 수 있다.&lt;br /&gt;
단, Host에 X Window가 설치되어 있어야 한다.&lt;/p&gt;

&lt;p&gt;이 예시는 Ubuntu 16.04를 기준으로 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Host에는 X Window가 설치되어 있어야 하고,&lt;/li&gt;
  &lt;li&gt;환경변수 &lt;strong&gt;DISPLAY&lt;/strong&gt; 가 정의돼 있어야 한다.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;$HOME/.Xauthority file&lt;/em&gt; 이 있어야 한다.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;--net=host&lt;/em&gt; 사용해야 한다.&lt;/li&gt;
  &lt;li&gt;Example command line&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -it --rm 
--security-opt seccomp:unconfied 
--cap-add=ALL --privileged
-e DISPLAY=$DISPLAY
-v $HOME/.Xauthority:/home/user/.Xauthority:rw 
--net=host 
&amp;lt;image&amp;gt;
&amp;lt;command&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;note) &lt;em&gt;--rm&lt;/em&gt; option은 image, container사이의 coherency 유지를 위해 사용한다.&lt;br /&gt;
&lt;em&gt;--security-opt seccomp:unconfied --cap-add=ALL --privileged&lt;/em&gt; 은 &lt;strong&gt;gdb&lt;/strong&gt; 사용을 위한 option이다.&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Apr 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/dev/2019/04/15/docker-xwingui.html</link>
        <guid isPermaLink="true">http://localhost:4000/dev/2019/04/15/docker-xwingui.html</guid>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>how to get bazel work behind proxy</title>
        <description>&lt;p&gt;proxy를 통해 network에 접속하는 환경에서 bazel을 사용할 때, 인증서 문제로 source build할 수 없는 상황에 맞닥뜨리게 된다. 처음에는 firewall문제로 인식하고 local cache를 사용하는 등의 방법으로 우회를 고민하게 된다. 그런 개발 환경에서의 개발은 절름발이 신세를 빠져나오지 못한다.&lt;br /&gt;
절름발이 신세를 빠져나온 길의 기록이다.&lt;/p&gt;

&lt;p&gt;proxy뒤에서 bazel build를 시도하면 이런 error message를 만나게 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 에러는 bazel아니라, JVM의 error message로 target URL의 인증서를 찾을 수 없다는 error다.&lt;br /&gt;
따라서, Bazel이 실행되는 JVM의 certificate 환경을 자신의 proxy에 맞춰주면 된다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;install certificate for a site&lt;br /&gt;
  대부분 proxy 뒤에 위치한 서버라면 기본적으로 Proxy에 대한 인증서가 설치되어 있을 것이다.
  해당 서버에서 browser를 통해 문제가 되는 파일 혹은 사이트에 접근이 된다면 인증서 설정이 되어있는 상태이고, 이 단계는 건너띄어도 된다.&lt;br /&gt;
  만약 설치가 되어있지 않은 환경이라면 다음과 같은 과정을 통해 인증서를 설치한다.&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;Download InstallCert.java code from &lt;a href=&quot;https://jonelove.tistory.com/entry/JAVA-SSL-PKIX-path-building-failed-%EC%98%A4%EB%A5%98%EC%8B%9C&quot;&gt;somewhere&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;create jar file
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ javac InstallCert.java
$ manifet.txt:
$ Main-class: InstallCert
$ jar -cvmf manifest.txt InstallCert.jar *.class
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;download cetificates
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ java -jar InstallCert.jar &amp;lt;URL-you-want-to-access&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;export to file from local keystore
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ keytool -exportcert -keystore jssecacerts -storepass changeit -file output.cert -alias &amp;lt;your-alias-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;import to JAVA keystore
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ keytool -importcert -keystore ${JAVA_HOME}/jre/lib/security/cacerts -storepass changeit -file output.cert -alias &amp;lt;letsencrypt&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;proxy awareness &lt;strong&gt;bazel&lt;/strong&gt;&lt;br /&gt;
  인증서가 system에 정상 설치되어 있더라도, JVM이 proxy용 인증서를 사용하도록 해야 한다.&lt;br /&gt;
  (JVM 기본 설정은 proxy가 없는 상태를 전제로 설정된 것으로 보인다.)&lt;br /&gt;
  JVM에 인증서 위치(trustStore, keyStore)를 override하는 option은 다음과 같다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Djavax.net.ssl.trustStore=&amp;lt;your-path-to-trustStorea&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;strong&gt;bazel&lt;/strong&gt;은 &lt;em&gt;–host_jvm_args&lt;/em&gt; option을 통해 JVM option을 전달 받는다.&lt;br /&gt;
  따라서 다음의 command line으로 proxy 뒤에서도 정상적으로 bazel을 사용할 수 있다.&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bazel --host_jvm_args=‘-Djavax.net.ssl.trustStore=$path-to-truststore’ build &amp;lt;your-build-target&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Annex
    &lt;ol&gt;
      &lt;li&gt;more java option&lt;br /&gt;
  java app인 경우. http.proxyHost option으로는 부족할 때가 있다. (정확히 어떤 경우인지는 FFS이다.)&lt;br /&gt;
  이 때, 다음 option을 사용해 볼 수 있다.
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Djava.net.useSystemProxies=true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;em&gt;JAVA_HOME&lt;/em&gt; of OSX
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 14 Apr 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/tensorflow/2019/04/14/bazel-behind-proxy.html</link>
        <guid isPermaLink="true">http://localhost:4000/tensorflow/2019/04/14/bazel-behind-proxy.html</guid>
        
        
        <category>tensorflow</category>
        
      </item>
    
      <item>
        <title>나만의 필사 방법</title>
        <description>&lt;p&gt;새해 목표 중 하나로 &lt;strong&gt;글 쓰기&lt;/strong&gt;를 설정하면서, &lt;strong&gt;필사&lt;/strong&gt;를 그 첫번째 수단으로 삼았다. 사실 &lt;strong&gt;필사&lt;/strong&gt; 자체도 쉽지만은 않다.&lt;br /&gt;
내가 처음 접한 필사의 방법론은 신동진 기자의 글(https://brunch.co.kr/@eastgo/386) 이었다. 
Top down 방식의 접근법을 제시하고 있다.
방법을 정리해 보면 이렇다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;필사할 글은 본인이 직접 고른다.&lt;/li&gt;
  &lt;li&gt;먼저 쓱 읽는다.&lt;/li&gt;
  &lt;li&gt;몇 번 읽어서 전체 글이 무엇을 말하고자 하는지 파악한다.&lt;/li&gt;
  &lt;li&gt;필사를 하면서 단어, 문장 구조, 문장 접속 구조를 익힌다.
    &lt;ul&gt;
      &lt;li&gt;필사할 때는 가능한 문장 단위로 필사한다.&lt;/li&gt;
      &lt;li&gt;문장이 길면 가능한 가장 긴 의미 단위로 필사한다.&lt;/li&gt;
      &lt;li&gt;필사할 때는 자신이 문장을 작성한다는 생각으로 쓴다. 작성 후 원문과 비교해서 단어, 문장 구조등을 익힌다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;4번의 과정으로 문장 구조가 눈에 들어오면, 문단 구조, 문단 접속 구조로 넘어간다.&lt;/li&gt;
  &lt;li&gt;5번의 과정이 익숙해 지면, 글 전체 구조를 파악하는 단계로 넘어간다.&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Wed, 14 Feb 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/writing/2018/02/14/my-transciption.html</link>
        <guid isPermaLink="true">http://localhost:4000/writing/2018/02/14/my-transciption.html</guid>
        
        
        <category>writing</category>
        
      </item>
    
      <item>
        <title>Tensorflow install</title>
        <description>&lt;h1 id=&quot;basic-package-install&quot;&gt;basic package install&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install python-numpy python-dev python-pip python-whee
$ sudo apt-get install python3-numpy python3-dev python3-pip python3-wheel
$ sudo apt-get install ipython swig libcupti-dev
$ sudo apt-get install git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;install-bazel-custom-apt-repository&quot;&gt;install Bazel custom APT repository&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install openjdk-8-jdk

$ echo &quot;deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8&quot; | sudo tee /etc/apt/sources.list.d/bazel.list
$ curl https://bazel.build/bazel-release.pub.gpg | sudo apt-key add -

$ sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install bazel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;install-depency-module&quot;&gt;install depency module&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    # Python 2.7:
    $ pip install — upgrade pip
    $ pip install setuptools six numpy wheel jupyter
    
    # Python 3.x:
    $ pip3 install — upgrade pip
    $ pip3 install setuptools six numpy wheel jupyter    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;install-nvidia-package-on-host&quot;&gt;install NVIDIA package on host&lt;/h1&gt;

&lt;h2 id=&quot;driver&quot;&gt;driver&lt;/h2&gt;
&lt;p&gt;download and execute NVIDIA-Linux-x86_64-384.69.run&lt;/p&gt;

&lt;h2 id=&quot;install-cuda-toolkit&quot;&gt;install CUDA toolkit&lt;/h2&gt;
&lt;p&gt;https://developer.nvidia.com/cuda-downloads&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   $ sudo dpkg -i cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64.deb
   $ sudo apt-get update
   $ sudo apt-get install cuda
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;cudnn-install&quot;&gt;cuDNN install&lt;/h2&gt;
&lt;p&gt;download from https://developer.nvidia.com/cudnn&lt;/p&gt;

&lt;p&gt;your CUDA directory path is preferred to as /usr/local/cuda&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ tar xvfz cudnn-9.0-linux-x64-v7.tgz

$ sudo cp cuda/include/cudnn.h /usr/local/cuda/include
$ sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64
$ sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*

$ sudo dpkg -i libcudnn7_7.0.2.43-1+cuda9.0_amd64.deb
$ sudo dpkg -i libcudnn7-dev_7.0.2.43-1+cuda9.0_amd64.deb
$ sudo dpkg -i libcudnn7-doc_7.0.2.43-1+cuda9.0_amd64.deb```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;docker-options-for-gpu-driver-interface&quot;&gt;Docker options for GPU driver interface&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NVIDIA_SO=$(\ls -d /usr/lib/nvidia* | xargs -I{} echo '-v {}:{}')
CUDA_SO=$(\ls /usr/lib/x86_64-linux-gnu/libcuda* | xargs -I{} echo '-v {}:{}')
DEVICES=$(\ls /dev/nvidia* | xargs -I{} echo '--device {}:{}')

docker run -it --device /dev/mem:/dev/mem -v /lib/modules:/lib/modules --cap-add=ALL --privileged $CUDA_SO $NVIDIA_SO $DEVICES &amp;lt;docker image&amp;gt; /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;buildinstall-tensorflow&quot;&gt;build/install tensorflow&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone https://github.com/tensorflow/tensorflow

$ bazel build -c opt --config=cuda //tensorflow/cc:tutorials_example_trainer
$ bazel-bin/tensorflow/cc/tutorials_example_trainer --use_gpu

$ bazel build --config=opt --config=cuda //tensorflow/tools/pip_package:build_pip_package
$ bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg

$ sudo pip install /tmp/tensorflow_pkg/tensorflow-1.3.0-py2-none-any.whl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;install-validation&quot;&gt;Install validation&lt;/h1&gt;

&lt;h2 id=&quot;python-basic&quot;&gt;Python-basic&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import tensorflow as tf
hello = tf.constant('Hello, TensorFlow!')
sess = tf.Session()
print(sess.run(hello))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;python-gpu1&quot;&gt;Python-gpu1&lt;/h2&gt;

&lt;p&gt;To find out which devices your operations and tensors are assigned to, create the session with log_device_placement configuration option set to True.&lt;/p&gt;

&lt;h3 id=&quot;creates-a-graph&quot;&gt;Creates a graph.&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[2, 3], name='a')
b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3, 2], name='b')
c = tf.matmul(a, b)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;creates-a-session-with-log_device_placement-set-to-true&quot;&gt;Creates a session with log_device_placement set to True.&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sess = tf.Session(config=tf.ConfigProto(log_device_placement=True))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;runs-the-op&quot;&gt;Runs the op.&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;print(sess.run(c))
You should see the following output:

Device mapping:
/job:localhost/replica:0/task:0/gpu:0 -&amp;gt; device: 0, name: Tesla K40c, pci bus
id: 0000:05:00.0
b: /job:localhost/replica:0/task:0/gpu:0
a: /job:localhost/replica:0/task:0/gpu:0
MatMul: /job:localhost/replica:0/task:0/gpu:0
[[ 22.  28.]
 [ 49.  64.]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;python-gpu2&quot;&gt;Python-gpu2&lt;/h2&gt;
&lt;p&gt;If you would like a particular operation to run on a device of your choice instead of what’s automatically selected for you, you can use with tf.device to create a device context such that all the operations within that context will have the same device assignment.&lt;/p&gt;

&lt;h3 id=&quot;creates-a-graph-1&quot;&gt;Creates a graph.&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;with tf.device('/cpu:0'):
  a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[2, 3], name='a')
  b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3, 2], name='b')
c = tf.matmul(a, b)
# Creates a session with log_device_placement set to True.
sess = tf.Session(config=tf.ConfigProto(log_device_placement=True))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;runs-the-op-1&quot;&gt;Runs the op.&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;print(sess.run(c))
You will see that now a and b are assigned to cpu:0. Since a device was not explicitly specified for the MatMul operation, the TensorFlow runtime will choose one based on the operation and available devices (gpu:0 in this example) and automatically copy tensors between devices if required.

Device mapping:
/job:localhost/replica:0/task:0/gpu:0 -&amp;gt; device: 0, name: Tesla K40c, pci bus
id: 0000:05:00.0
b: /job:localhost/replica:0/task:0/cpu:0
a: /job:localhost/replica:0/task:0/cpu:0
MatMul: /job:localhost/replica:0/task:0/gpu:0
[[ 22.  28.]
 [ 49.  64.]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;jupyter-notebook&quot;&gt;Jupyter notebook&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;설정파일 만들기&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ jupyter notebook --generate-config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;설정파일은 아래의 path에 만들어 진다.&lt;/p&gt;

&lt;p&gt;~/.jupyter/jupyter_notebook_config.py&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;generate password&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; from notebook.auth import passwd
 passwd()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;~/.jupyter/jupyter_notebook_config.py&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; c.NotebookApp.ip = ‘*’
 c.NotebookApp.password = u’sha1:....’
 c.NotebookApp.open_browser = False
 c.NotebookApp.port = 8888
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;issue&quot;&gt;issue&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;bazel build failure
[https://github.com/tensorflow/tensorflow/issues/12979]
github’s checksum is changed, bazel build will fail. 
For workaround, remove sha256 procedure from tensorflow/workspace.bzl&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sed -ri &quot;/^\W+sha256 = \&quot;[^\&quot;]+\&quot;\W+$/d&quot; tensorflow/workspace.bzl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;ImportError:libcusolver.so.8.p0
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64:/usr/lib/nvidia-&lt;version&gt;&lt;/version&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ImportError:nvidia-&lt;verstion&gt; libraries
need to link nvidia library path on host to docker by Volume interface&lt;/verstion&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;export NVIDIA_SO=$(\ls -d /usr/lib/nvidia*&lt;/td&gt;
      &lt;td&gt;xargs -I{} echo ‘-v {}:{}’)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;ImportError: No module named pywrap_tensorflow_internal
leave tensorflow source directory
python trys to import tensorflow from source directory not from install path&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;build for python3
at ./configure time, choose python3&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;dockerfile&quot;&gt;Dockerfile&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM ubuntu.user.base

RUN apt-get update &amp;amp;&amp;amp; apt-get -y -no-install-recommends install \
	python-pip python-dev python-numpy python-wheel swig\
	python3-pip python3-dev python3-numpy python3-wheel\		
	libcupti-dev git patch\
	openjdk-8-jdk

RUN echo &quot;deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8&quot; | tee /etc/apt/sources.list.d/bazel.list
RUN curl https://bazel.build/bazel-release.pub.gpg | apt-key add -
RUN apt-get update &amp;amp;&amp;amp; apt-get install bazel

RUN pip install -upgrade pip
RUN pip install setuptools six numpy wheel jupyter

RUN pip3 install -upgrade pip
RUN pip3 install setuptools six numpy wheel jupyter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 05 Oct 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/deep-learning/2017/10/05/tensorflow-install.html</link>
        <guid isPermaLink="true">http://localhost:4000/deep-learning/2017/10/05/tensorflow-install.html</guid>
        
        
        <category>deep-learning</category>
        
      </item>
    
      <item>
        <title>using gdb inside docker container</title>
        <description>&lt;p&gt;Docker container내에서 gdb로 debugging을 할때 설정된 break point에서 break가 걸리지 않는 경우가 있다.
docker container에서 정상적인 gdb사용을 위해서는 아래 옵션을 추가해서 docker container를 실행해야 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run --security-opt seccomp:unconfined
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Sat, 16 Sep 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/emacs/2017/09/16/gdb-inside-docker.html</link>
        <guid isPermaLink="true">http://localhost:4000/emacs/2017/09/16/gdb-inside-docker.html</guid>
        
        
        <category>emacs</category>
        
      </item>
    
      <item>
        <title>register Cerificates manually in ubuntu</title>
        <description>&lt;p&gt;사내에서는 웹사이트 인증서를 따로 설치해야 할 필요가 있다&lt;/p&gt;

&lt;p&gt;인증서 import 기능을 제공하는 브라우저에서는, 해당 메뉴를 사용하면 되고
그렇지 않은 경우는 시스템에 등록해야 한다.&lt;/p&gt;

&lt;p&gt;ubuntu에서는 아래 command line 명령을 사용해 등록한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;copy certificate files to /usr/local/share/ca-certificates&lt;br /&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo cp &amp;lt;path-to-ca-file&amp;gt; /usr/local/share/ca-certificates
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;register&lt;br /&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo update-ca-certificates
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sun, 10 Sep 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/dev-common/2017/09/10/ubuntu-ca-install.html</link>
        <guid isPermaLink="true">http://localhost:4000/dev-common/2017/09/10/ubuntu-ca-install.html</guid>
        
        
        <category>dev-common</category>
        
      </item>
    
      <item>
        <title>latex에서 한글 밎 다양한 font 사용하기</title>
        <description>&lt;p&gt;latex 기본 폰트는 읽을때 심적으로 부담을 가지게 한다. 적어도 나에게는 그렇다. 텍스트만으로 가득한 문서에나 어울릴 것 같은 폰트 같이 느껴진다. 그래서, latex으로 만들 문서를 좀더 읽기 편하게 만들어 주기 위한 폰트를 사용할 수 있는 방법을 다음과 같이 기록해 둔다.&lt;/p&gt;

&lt;h1 id=&quot;install-extra-font&quot;&gt;install extra font&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install texlive-fonts-extra```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;type-in-korean&quot;&gt;type in Korean&lt;/h1&gt;

&lt;p&gt;Latex 문서는 가능하면 영어로만 작성하려고 하지만, 문서의 목적 상 한글을 사용할 수 밖에 없는 경우도 많다.
아래는 Latex에서 한글 입력이 가능하도록 하는 방법이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install ko.tex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음 구문을 latex문서에 삽입하면 한글을 사용할 수 있다.&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\usepackage{kotex}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 10 Sep 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/dev-common/2017/09/10/latex-fonts.html</link>
        <guid isPermaLink="true">http://localhost:4000/dev-common/2017/09/10/latex-fonts.html</guid>
        
        
        <category>dev-common</category>
        
      </item>
    
      <item>
        <title>copying full path of current file in emacs</title>
        <description>&lt;p&gt;copy below function into &lt;strong&gt;.emacs.d/init.el&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(defun clip-file-path ()
  &quot;Copy the current buffer file name to the clipboard.&quot;
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new filename)
      (message &quot;Copied buffer file name '%s' to the clipboard.&quot; filename))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Sun, 10 Sep 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/emacs/2017/09/10/emacs-clip-file-path.html</link>
        <guid isPermaLink="true">http://localhost:4000/emacs/2017/09/10/emacs-clip-file-path.html</guid>
        
        
        <category>emacs</category>
        
      </item>
    
      <item>
        <title>ubuntu에서 세벌식 입력기 사용하기</title>
        <description>&lt;p&gt;우분투에서 세벌식 한글 입력기를 사용하기 위한 방법이다.&lt;br /&gt;
한글 사용을 위한 ibus-hangul설치가 된 환경을 전제로 한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;세벌식 자판중에서는 최종보다는 신세벌식 2012를 사용하기를 권장한다.&lt;/p&gt;

&lt;h1 id=&quot;install&quot;&gt;install&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo add-apt-repository -y ppa:createsc/3beol
$ sudo apt-get update -y
$ sudo apt-get upgrade -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;remove&quot;&gt;remove&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install -y ppa-purge
$ sudo ppa-purge ppa:createsc/3beol
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 10 Sep 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/dev-common/2017/09/10/3beol-linux.html</link>
        <guid isPermaLink="true">http://localhost:4000/dev-common/2017/09/10/3beol-linux.html</guid>
        
        
        <category>dev-common</category>
        
      </item>
    
      <item>
        <title>Tips for Docker Install and Usage</title>
        <description>&lt;h1 id=&quot;install&quot;&gt;Install&lt;/h1&gt;
&lt;p&gt;reference: &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-16-04&quot;&gt;https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-16-04&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;add the GPG key for the official Docker repository to the system:&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;add docker repository&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;$sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;update the package database&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;$sudo apt-get update&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;make sure to install from the Docker repo instead of the default Ubuntu 16.04 repo&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ apt-cache policy docker-ce&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;install docker&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo apt-get install -y docker-ce&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;executing-without-sudo&quot;&gt;Executing without sudo&lt;/h1&gt;
&lt;p&gt;by default, running the docker command requires root privileges
instead create &lt;strong&gt;docker&lt;/strong&gt; group&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;add user to &lt;strong&gt;docker&lt;/strong&gt; group&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo usermod -aG docker ${USER}&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;relogin&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ su - ${USER}&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;confirm&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ id -nG&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;saveload-docker-image&quot;&gt;Save/Load docker image&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;add new image with offline&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ docker load --input &amp;lt;image file&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;save image to file&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ docker save --output &amp;lt;filename&amp;gt; &amp;lt;image name&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;creating-docker-image-with-user-not-root&quot;&gt;Creating docker image with user (not root)&lt;/h1&gt;
&lt;p&gt;개발환경용으로 사용하기 위해서는 사용자 계정으로 docker container를 실행해야 한다.
이때, host의 사용자 계정에 해당하는 계정이 image에 없으면,  root로 실행해서,  host  사용자와 동일한 UID를 가지는 사용자 계정을 만든 후에 커밋을 해야한다.
꼭 gosu를 사용해야하는 지는 알수 없지만, gosu를 사용해서, container 실행시 사용자 계정을 만들고, 해당 계정으로 로그인하는 docker image를 만들 수 있다.&lt;/p&gt;

&lt;p&gt;Reference: &lt;a href=&quot;https://denibertovic.com/posts/handling-permissions-with-docker-volumes/&quot;&gt;https://denibertovic.com/posts/handling-permissions-with-docker-volumes/&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Dockerfile&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        FROM baseimage
	
        ENV http_proxy ???
        ENV https_proxy ???
        ENV HOSTNAME=docker

        RUN groupadd developer        
        RUN apt-get update &amp;amp;&amp;amp; apt-get -y --no-install-recommends install \
            ca-certificates \
            curl tzdata \
            sudo
    
        RUN gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4
        RUN curl -o /usr/local/bin/gosu -SL &quot;https://github.com/tianon/gosu/releases/download/1.4/gosu-$(dpkg --print-architecture)&quot; \
            &amp;amp;&amp;amp; curl -o /usr/local/bin/gosu.asc -SL &quot;https://github.com/tianon/gosu/releases/download/1.4/gosu-$(dpkg --print-architecture).asc&quot; \
            &amp;amp;&amp;amp; gpg --verify /usr/local/bin/gosu.asc \
            &amp;amp;&amp;amp; rm /usr/local/bin/gosu.asc \
            &amp;amp;&amp;amp; chmod +x /usr/local/bin/gosu
            
        RUN echo &quot;Asia/Seoul&quot; &amp;gt; /etc/timezone
        RUN rm /etc/localtime
        RUN dpkg-reconfigure -f noninteractive tzdata
	    
        COPY entrypoint.sh /usr/local/bin/entrypoint.sh
	
        ENTRYPOINT [&quot;/usr/local/bin/entrypoint.sh&quot;]
        CMD [&quot;bin/bash&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;entrypoint.sh&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        &lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
    
        &lt;span class=&quot;nv&quot;&gt;USER_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LOCAL_USER_ID&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;9001&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
    
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Start with UID : &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$USER_ID&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$USER_ID&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-eq&lt;/span&gt; 0]&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
            &lt;/span&gt;getent passwd &lt;span class=&quot;nv&quot;&gt;$USER_ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /dev/null 2&amp;gt;&amp;amp;1
            &lt;span class=&quot;nv&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
    	
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-eq&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
                &lt;/span&gt;useradd &lt;span class=&quot;nt&quot;&gt;--shell&lt;/span&gt; /bin/bash &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$USER_ID&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; /home/user &lt;span class=&quot;nt&quot;&gt;-M&lt;/span&gt; user-&lt;span class=&quot;nv&quot;&gt;$USER_ID&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;user-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$USER_ID&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; ALL=(ALL) NOPASSWD: ALL&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; etc/sudoers
            &lt;span class=&quot;k&quot;&gt;fi
	    	&lt;/span&gt;usermod &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-G&lt;/span&gt; developer user-&lt;span class=&quot;nv&quot;&gt;$USER_ID&lt;/span&gt;
	    	
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; /home/user &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
                &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /home/user
            &lt;span class=&quot;k&quot;&gt;fi
            
            &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chown&lt;/span&gt; :developer /home/user
            &lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;775 /home/user
            
            &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/user
    	
            &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; /usr/local/bin/gosu user-&lt;span class=&quot;nv&quot;&gt;$USER_ID&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;fi
    
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;create image using Dockerfile&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ docker build -t &amp;lt;image_name&amp;gt; &amp;lt;Dockerfile path&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;execute as a specific user&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ docker run -it -e LOCAL_USER_ID=`id -u $USER` myimage&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sync timezone with host server
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ docker run -it -v /etc/localtime:/etc/localtime:ro -e LOCAL_USER_ID=`id -u $USER` myimage&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;execution&quot;&gt;Execution&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;CUDA_SO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\l&lt;/span&gt;s /usr/lib/x86_64-linux-gnu/libcuda&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; | xargs &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; ‘-v &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;’&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CUDA_LOCAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\l&lt;/span&gt;s &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; /usr/local/cuda&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; | xargs &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; ‘-v &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;’&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;NVIDIA_SO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\l&lt;/span&gt;s &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; /usr/lib/nvidia&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; | xargs &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; ‘-v &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;’&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;DEVICES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\l&lt;/span&gt;s /dev/nvidia&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; | xargs &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; —device &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;’&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;image_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;image name&amp;gt;
&lt;span class=&quot;nv&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;prefix&amp;gt;-&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

docker ps &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /dev/null 2&amp;gt;&amp;amp;1
&lt;span class=&quot;nv&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-eq&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
	&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;No Container found, create new container &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
	
	docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; - &lt;span class=&quot;nt&quot;&gt;-restart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;?&amp;gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;LOCAL_USER_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
		- &lt;span class=&quot;nt&quot;&gt;-cap-add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ALL - &lt;span class=&quot;nt&quot;&gt;-privileged&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; ???
		- &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;prefix&amp;gt;-&lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
		&lt;span class=&quot;nv&quot;&gt;$image_name&lt;/span&gt; /bin/bash
&lt;span class=&quot;k&quot;&gt;else
	&lt;/span&gt;docker start &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;containter_name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; docker attach &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;migration&quot;&gt;Migration&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;change uid&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ usermod -u &amp;lt;new id&amp;gt; &amp;lt;id&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;change permission outside user home&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ find / -uid &amp;lt;old id&amp;gt; -exec chown -R &amp;lt;id&amp;gt; {} \;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;tips&quot;&gt;Tips&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;delete/kill/ all containers or images&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker rm $(docker ps -a -q -f status=exited)
$ docker kill $(docker ps -q)
$ docker rmi $(docker images -q)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;remove all untagged images&lt;/li&gt;
&lt;/ol&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;docker rmi $(docker images&lt;/td&gt;
      &lt;td&gt;grep “^&amp;lt;none&amp;gt;” | awk “{print $3}”)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

</description>
        <pubDate>Wed, 06 Sep 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/dev/common/2017/09/06/docker-memo.html</link>
        <guid isPermaLink="true">http://localhost:4000/dev/common/2017/09/06/docker-memo.html</guid>
        
        
        <category>dev</category>
        
        <category>common</category>
        
      </item>
    
  </channel>
</rss>
