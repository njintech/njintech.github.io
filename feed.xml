<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tesigners</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 05 May 2020 09:06:17 +0900</pubDate>
    <lastBuildDate>Tue, 05 May 2020 09:06:17 +0900</lastBuildDate>
    <generator>Jekyll v3.7.2</generator>
    
      <item>
        <title>MathJax로 Jekyll blog에 수학식 표현하기</title>
        <description>&lt;ol&gt;
  &lt;li&gt;_config.yml
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;markdown: kramdown
highlighter: rouge
lsi: false
excerpt_separator: &quot;\n\n&quot;
incremental: false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;_includes/mathjax_support.html
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script type=&quot;text/x-mathjax-config&quot;&amp;gt;
 MathJax.Hub.Config({
TeX: {
  equationNumbers: {
    autoNumber: &quot;AMS&quot;
  }
},
tex2jax: {
  inlineMath: [ ['$', '$'] ],
  displayMath: [ ['$$', '$$'] ],
  processEscapes: true,
}
 });
 MathJax.Hub.Register.MessageHook(&quot;Math Processing Error&quot;,function (message) {
alert(&quot;Math Processing Error: &quot;+message[1]);
 });
 MathJax.Hub.Register.MessageHook(&quot;TeX Jax - parse error&quot;,function (message) {
alert(&quot;Math Processing Error: &quot;+message[1]);
 });
&amp;lt;/script&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot; async
     src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML&quot;&amp;gt;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;_layouts/post.html
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{ % if page.use_math % }
  { % include mathjax_support.html % }
{ % endif % }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;posting example
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
layout: post
title: &quot;MathJax로 Jekyll blog에 수학식 표현하기&quot;
use_math: true
---
   
Standard normal distribution: $\phi(x) = \frac{1}{2\pi}\varepsilon^{\frac{-x^2}{2}}$ is an example.
   
$$
\phi(x) = \frac{1}{2\pi}\varepsilon^{\frac{-x^2}{2}}
$$
   
$$
E = mc^2
$$
   
$$
e^{i\pi} + 1 = 0
$$
   
$$
v(t) = v_{peak}\sin(\omega t)
$$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Standard normal distribution: $\phi(x) = \frac{1}{2\pi}\varepsilon^{\frac{-x^2}{2}}$ is an example.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\phi(x) = \frac{1}{2\pi}\varepsilon^{\frac{-x^2}{2}}&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;E = mc^2&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;e^{i\pi} + 1 = 0&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;v(t) = v_{peak}\sin(\omega t)&lt;/script&gt;
</description>
        <pubDate>Tue, 05 May 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020/05/05/Jekyll-Mathjax.html</link>
        <guid isPermaLink="true">http://localhost:4000/2020/05/05/Jekyll-Mathjax.html</guid>
        
        
      </item>
    
      <item>
        <title>Emacs에서 remote host의 파일 편집하기</title>
        <description>&lt;p&gt;이맥스로 편집기를 갈아타기로 결정하고 난 후 여러 환경에서도 이맥스를 사용하고자 했다.
(이맥스는 편집기뿐 아니라 실행, 디버깅까지 할 수 있는 통합개발환경으로 사용할 수 있고
마크다운, 레이텍, 플랜트 유엠엘, 피디에프/이미지 뷰어, 깃클라이언트 등으로 사용할 수 있다.)&lt;/p&gt;

&lt;p&gt;수년 전 부터 회사의 개발 환경이 리눅스로 바뀌고 있었고, 요즘은 고성능 리눅스 서버에 접속해서 개발을 하고 있다.
하지만 문서작업과 인프라는 윈도우를 사용할 수 밖에 없는 상황이어서, 개인 로컬피씨 오에스는 윈도우 일 수 밖에 없는 상황이다.&lt;/p&gt;

&lt;p&gt;이 경우 이맥스를 적용할 수 있는 시나리오는 두 가지이다.(콘솔 버전의 이맥스 사용은 배제한다.)&lt;/p&gt;

&lt;p&gt;첫째는 엑스 서버를 지원하는 터미널 프로그램으로 서버에 접속해 이맥스를 실행하는 방법이다. 서버에서 실행한 이맥스 윈도우가 로컬피씨에서 보이게 되는 것이다. 이 방법은 특별한 가이드 필요없고, 당연히 가장 쉬운 방법이다. &lt;br /&gt;
지금은 이 방법을 사용하고 있지만, 이 경우 서버에 엑스윈도우 데스크탑이 설치되어 있어야 한다.&lt;/p&gt;

&lt;p&gt;두번째는 로컬호스ㅌ에서 실행시킨 이맥스에서 서버로 접속해 파일을 편집하는 방법이다. 디렉토리 뷰를 통해 서버에 접속하는 방법이다. 이맥스에서 아래의 커맨드 라인을 이용해 서버에 접근할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C-x d /scp:&amp;lt;user&amp;gt;@&amp;lt;host&amp;gt;:&amp;lt;path to dir or file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 09 Jun 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/emacs/2019/06/09/emacs-remote-files.html</link>
        <guid isPermaLink="true">http://localhost:4000/emacs/2019/06/09/emacs-remote-files.html</guid>
        
        
        <category>emacs</category>
        
      </item>
    
      <item>
        <title>Running X Window app from docker container</title>
        <description>&lt;p&gt;Server에서 개발을 하다보면 필요한 패키지를 설치해야 하거나, 사용해보고 싶은 서비스를 설치하거나 자신에게 맞는 개발 환경을 구성하고 싶을 때가 있다. 이 때마다 관리자에게 요청을 할 수도 없고, 하더라도 거부당 할 수 있다.&lt;/p&gt;

&lt;p&gt;그래서 배포를 위해 docker를 사용하기도 하지만, 개발환경을 구성하기 위해 더 많이 사용하고 있다.&lt;/p&gt;

&lt;p&gt;개인적인 기호겠지만, 서버 호스트에는 최소한의 공통 package만 설치, docker권한을 부여 후, 나머지는 customize된 환경을 사용할 수 있도록 하는 것이 서버의 안정성 및 사용성에 가장 좋은 운영 방안인 것 같다.&lt;/p&gt;

&lt;p&gt;간혹 X Window GUI app을 docker에 설치해 사용해야 하는 경우가 있는데, docker container를 만들 때 지정하는 option만으로 docker container의 X window app을 host에 띄울 수 있다.&lt;br /&gt;
단, Host에 X Window가 설치되어 있어야 한다.&lt;/p&gt;

&lt;p&gt;이 예시는 Ubuntu 16.04를 기준으로 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Host에는 X Window가 설치되어 있어야 하고,&lt;/li&gt;
  &lt;li&gt;환경변수 &lt;strong&gt;DISPLAY&lt;/strong&gt; 가 정의돼 있어야 한다.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;$HOME/.Xauthority file&lt;/em&gt; 이 있어야 한다.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;--net=host&lt;/em&gt; 사용해야 한다.&lt;/li&gt;
  &lt;li&gt;Example command line&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -it --rm 
--security-opt seccomp:unconfied 
--cap-add=ALL --privileged
-e DISPLAY=$DISPLAY
-v $HOME/.Xauthority:/home/user/.Xauthority:rw 
--net=host 
&amp;lt;image&amp;gt;
&amp;lt;command&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;note) &lt;em&gt;--rm&lt;/em&gt; option은 image, container사이의 coherency 유지를 위해 사용한다.&lt;br /&gt;
&lt;em&gt;--security-opt seccomp:unconfied --cap-add=ALL --privileged&lt;/em&gt; 은 &lt;strong&gt;gdb&lt;/strong&gt; 사용을 위한 option이다.&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Apr 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/dev/2019/04/15/docker-xwingui.html</link>
        <guid isPermaLink="true">http://localhost:4000/dev/2019/04/15/docker-xwingui.html</guid>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>how to get bazel work behind proxy</title>
        <description>&lt;p&gt;proxy를 통해 network에 접속하는 환경에서 bazel을 사용할 때, 인증서 문제로 source build할 수 없는 상황에 맞닥뜨리게 된다. 처음에는 firewall문제로 인식하고 local cache를 사용하는 등의 방법으로 우회를 고민하게 된다. 그런 개발 환경에서의 개발은 절름발이 신세를 빠져나오지 못한다.&lt;br /&gt;
절름발이 신세를 빠져나온 길의 기록이다.&lt;/p&gt;

&lt;p&gt;proxy뒤에서 bazel build를 시도하면 이런 error message를 만나게 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 에러는 bazel아니라, JVM의 error message로 target URL의 인증서를 찾을 수 없다는 error다.&lt;br /&gt;
따라서, Bazel이 실행되는 JVM의 certificate 환경을 자신의 proxy에 맞춰주면 된다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;install certificate for a site&lt;br /&gt;
  대부분 proxy 뒤에 위치한 서버라면 기본적으로 Proxy에 대한 인증서가 설치되어 있을 것이다.
  해당 서버에서 browser를 통해 문제가 되는 파일 혹은 사이트에 접근이 된다면 인증서 설정이 되어있는 상태이고, 이 단계는 건너띄어도 된다.&lt;br /&gt;
  만약 설치가 되어있지 않은 환경이라면 다음과 같은 과정을 통해 인증서를 설치한다.&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;Download InstallCert.java code from &lt;a href=&quot;https://jonelove.tistory.com/entry/JAVA-SSL-PKIX-path-building-failed-%EC%98%A4%EB%A5%98%EC%8B%9C&quot;&gt;somewhere&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;create jar file
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ javac InstallCert.java
$ manifet.txt:
$ Main-class: InstallCert
$ jar -cvmf manifest.txt InstallCert.jar *.class
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;download cetificates
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ java -jar InstallCert.jar &amp;lt;URL-you-want-to-access&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;export to file from local keystore
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ keytool -exportcert -keystore jssecacerts -storepass changeit -file output.cert -alias &amp;lt;your-alias-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;import to JAVA keystore
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ keytool -importcert -keystore ${JAVA_HOME}/jre/lib/security/cacerts -storepass changeit -file output.cert -alias &amp;lt;letsencrypt&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;proxy awareness &lt;strong&gt;bazel&lt;/strong&gt;&lt;br /&gt;
  인증서가 system에 정상 설치되어 있더라도, JVM이 proxy용 인증서를 사용하도록 해야 한다.&lt;br /&gt;
  (JVM 기본 설정은 proxy가 없는 상태를 전제로 설정된 것으로 보인다.)&lt;br /&gt;
  JVM에 인증서 위치(trustStore, keyStore)를 override하는 option은 다음과 같다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Djavax.net.ssl.trustStore=&amp;lt;your-path-to-trustStorea&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;strong&gt;bazel&lt;/strong&gt;은 &lt;em&gt;–host_jvm_args&lt;/em&gt; option을 통해 JVM option을 전달 받는다.&lt;br /&gt;
  따라서 다음의 command line으로 proxy 뒤에서도 정상적으로 bazel을 사용할 수 있다.&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bazel --host_jvm_args=‘-Djavax.net.ssl.trustStore=$path-to-truststore’ build &amp;lt;your-build-target&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Annex
    &lt;ol&gt;
      &lt;li&gt;more java option&lt;br /&gt;
  java app인 경우. http.proxyHost option으로는 부족할 때가 있다. (정확히 어떤 경우인지는 FFS이다.)&lt;br /&gt;
  이 때, 다음 option을 사용해 볼 수 있다.
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Djava.net.useSystemProxies=true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;em&gt;JAVA_HOME&lt;/em&gt; of OSX
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 14 Apr 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/tensorflow/2019/04/14/bazel-behind-proxy.html</link>
        <guid isPermaLink="true">http://localhost:4000/tensorflow/2019/04/14/bazel-behind-proxy.html</guid>
        
        
        <category>tensorflow</category>
        
      </item>
    
      <item>
        <title>필사 방법</title>
        <description>&lt;p&gt;글쓰기 공부를 위한 필사 방법을 정리해 봤다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;필사할 글은 본인이 직접 고른다.&lt;/li&gt;
  &lt;li&gt;먼저 쓱 읽는다.&lt;/li&gt;
  &lt;li&gt;몇 번 읽어서 전체 글이 무엇을 말하고자 하는지 파악한다.&lt;/li&gt;
  &lt;li&gt;필사를 하면서 단어, 문장 구조, 문장 접속 구조를 익힌다.
    &lt;ul&gt;
      &lt;li&gt;필사할 때는 가능한 문장 단위로 필사한다.&lt;/li&gt;
      &lt;li&gt;문장이 길면 가능한 가장 긴 의미 단위로 필사한다.&lt;/li&gt;
      &lt;li&gt;필사할 때는 자신이 문장을 작성한다는 생각으로 쓴다. 작성 후 원문과 비교해서 단어, 문장 구조등을 익힌다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;4번의 과정으로 문장 구조가 눈에 들어오면, 문단 구조, 문단 접속 구조로 넘어간다.&lt;/li&gt;
  &lt;li&gt;5번의 과정이 익숙해 지면, 글 전체 구조를 파악하는 단계로 넘어간다.&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Wed, 14 Feb 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/writing/2018/02/14/my-transciption.html</link>
        <guid isPermaLink="true">http://localhost:4000/writing/2018/02/14/my-transciption.html</guid>
        
        
        <category>writing</category>
        
      </item>
    
      <item>
        <title>Tensorflow install</title>
        <description>&lt;h1 id=&quot;basic-package-install&quot;&gt;basic package install&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install python-numpy python-dev python-pip python-whee
$ sudo apt-get install python3-numpy python3-dev python3-pip python3-wheel
$ sudo apt-get install ipython swig libcupti-dev
$ sudo apt-get install git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;install-bazel-custom-apt-repository&quot;&gt;install Bazel custom APT repository&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install openjdk-8-jdk

$ echo &quot;deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8&quot; | sudo tee /etc/apt/sources.list.d/bazel.list
$ curl https://bazel.build/bazel-release.pub.gpg | sudo apt-key add -

$ sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install bazel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;install-depency-module&quot;&gt;install depency module&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    # Python 2.7:
    $ pip install — upgrade pip
    $ pip install setuptools six numpy wheel jupyter
    
    # Python 3.x:
    $ pip3 install — upgrade pip
    $ pip3 install setuptools six numpy wheel jupyter    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;install-nvidia-package-on-host&quot;&gt;install NVIDIA package on host&lt;/h1&gt;

&lt;h2 id=&quot;driver&quot;&gt;driver&lt;/h2&gt;
&lt;p&gt;download and execute NVIDIA-Linux-x86_64-384.69.run&lt;/p&gt;

&lt;h2 id=&quot;install-cuda-toolkit&quot;&gt;install CUDA toolkit&lt;/h2&gt;
&lt;p&gt;https://developer.nvidia.com/cuda-downloads&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   $ sudo dpkg -i cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64.deb
   $ sudo apt-get update
   $ sudo apt-get install cuda
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;cudnn-install&quot;&gt;cuDNN install&lt;/h2&gt;
&lt;p&gt;download from https://developer.nvidia.com/cudnn&lt;/p&gt;

&lt;p&gt;your CUDA directory path is preferred to as /usr/local/cuda&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ tar xvfz cudnn-9.0-linux-x64-v7.tgz

$ sudo cp cuda/include/cudnn.h /usr/local/cuda/include
$ sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64
$ sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*

$ sudo dpkg -i libcudnn7_7.0.2.43-1+cuda9.0_amd64.deb
$ sudo dpkg -i libcudnn7-dev_7.0.2.43-1+cuda9.0_amd64.deb
$ sudo dpkg -i libcudnn7-doc_7.0.2.43-1+cuda9.0_amd64.deb```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;docker-options-for-gpu-driver-interface&quot;&gt;Docker options for GPU driver interface&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NVIDIA_SO=$(\ls -d /usr/lib/nvidia* | xargs -I{} echo '-v {}:{}')
CUDA_SO=$(\ls /usr/lib/x86_64-linux-gnu/libcuda* | xargs -I{} echo '-v {}:{}')
DEVICES=$(\ls /dev/nvidia* | xargs -I{} echo '--device {}:{}')

docker run -it --device /dev/mem:/dev/mem -v /lib/modules:/lib/modules --cap-add=ALL --privileged $CUDA_SO $NVIDIA_SO $DEVICES &amp;lt;docker image&amp;gt; /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;buildinstall-tensorflow&quot;&gt;build/install tensorflow&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone https://github.com/tensorflow/tensorflow

$ bazel build -c opt --config=cuda //tensorflow/cc:tutorials_example_trainer
$ bazel-bin/tensorflow/cc/tutorials_example_trainer --use_gpu

$ bazel build --config=opt --config=cuda //tensorflow/tools/pip_package:build_pip_package
$ bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg

$ sudo pip install /tmp/tensorflow_pkg/tensorflow-1.3.0-py2-none-any.whl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;install-validation&quot;&gt;Install validation&lt;/h1&gt;

&lt;h2 id=&quot;python-basic&quot;&gt;Python-basic&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import tensorflow as tf
hello = tf.constant('Hello, TensorFlow!')
sess = tf.Session()
print(sess.run(hello))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;python-gpu1&quot;&gt;Python-gpu1&lt;/h2&gt;

&lt;p&gt;To find out which devices your operations and tensors are assigned to, create the session with log_device_placement configuration option set to True.&lt;/p&gt;

&lt;h3 id=&quot;creates-a-graph&quot;&gt;Creates a graph.&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[2, 3], name='a')
b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3, 2], name='b')
c = tf.matmul(a, b)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;creates-a-session-with-log_device_placement-set-to-true&quot;&gt;Creates a session with log_device_placement set to True.&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sess = tf.Session(config=tf.ConfigProto(log_device_placement=True))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;runs-the-op&quot;&gt;Runs the op.&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;print(sess.run(c))
You should see the following output:

Device mapping:
/job:localhost/replica:0/task:0/gpu:0 -&amp;gt; device: 0, name: Tesla K40c, pci bus
id: 0000:05:00.0
b: /job:localhost/replica:0/task:0/gpu:0
a: /job:localhost/replica:0/task:0/gpu:0
MatMul: /job:localhost/replica:0/task:0/gpu:0
[[ 22.  28.]
 [ 49.  64.]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;python-gpu2&quot;&gt;Python-gpu2&lt;/h2&gt;
&lt;p&gt;If you would like a particular operation to run on a device of your choice instead of what’s automatically selected for you, you can use with tf.device to create a device context such that all the operations within that context will have the same device assignment.&lt;/p&gt;

&lt;h3 id=&quot;creates-a-graph-1&quot;&gt;Creates a graph.&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;with tf.device('/cpu:0'):
  a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[2, 3], name='a')
  b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3, 2], name='b')
c = tf.matmul(a, b)
# Creates a session with log_device_placement set to True.
sess = tf.Session(config=tf.ConfigProto(log_device_placement=True))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;runs-the-op-1&quot;&gt;Runs the op.&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;print(sess.run(c))
You will see that now a and b are assigned to cpu:0. Since a device was not explicitly specified for the MatMul operation, the TensorFlow runtime will choose one based on the operation and available devices (gpu:0 in this example) and automatically copy tensors between devices if required.

Device mapping:
/job:localhost/replica:0/task:0/gpu:0 -&amp;gt; device: 0, name: Tesla K40c, pci bus
id: 0000:05:00.0
b: /job:localhost/replica:0/task:0/cpu:0
a: /job:localhost/replica:0/task:0/cpu:0
MatMul: /job:localhost/replica:0/task:0/gpu:0
[[ 22.  28.]
 [ 49.  64.]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;jupyter-notebook&quot;&gt;Jupyter notebook&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;설정파일 만들기&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ jupyter notebook --generate-config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;설정파일은 아래의 path에 만들어 진다.&lt;/p&gt;

&lt;p&gt;~/.jupyter/jupyter_notebook_config.py&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;generate password&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; from notebook.auth import passwd
 passwd()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;~/.jupyter/jupyter_notebook_config.py&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; c.NotebookApp.ip = ‘*’
 c.NotebookApp.password = u’sha1:....’
 c.NotebookApp.open_browser = False
 c.NotebookApp.port = 8888
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;issue&quot;&gt;issue&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;bazel build failure
[https://github.com/tensorflow/tensorflow/issues/12979]
github’s checksum is changed, bazel build will fail. 
For workaround, remove sha256 procedure from tensorflow/workspace.bzl&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sed -ri &quot;/^\W+sha256 = \&quot;[^\&quot;]+\&quot;\W+$/d&quot; tensorflow/workspace.bzl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;ImportError:libcusolver.so.8.p0
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64:/usr/lib/nvidia-&lt;version&gt;&lt;/version&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ImportError:nvidia-&lt;verstion&gt; libraries
need to link nvidia library path on host to docker by Volume interface&lt;/verstion&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;export NVIDIA_SO=$(\ls -d /usr/lib/nvidia*&lt;/td&gt;
      &lt;td&gt;xargs -I{} echo ‘-v {}:{}’)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;ImportError: No module named pywrap_tensorflow_internal
leave tensorflow source directory
python trys to import tensorflow from source directory not from install path&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;build for python3
at ./configure time, choose python3&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;dockerfile&quot;&gt;Dockerfile&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM ubuntu.user.base

RUN apt-get update &amp;amp;&amp;amp; apt-get -y -no-install-recommends install \
	python-pip python-dev python-numpy python-wheel swig\
	python3-pip python3-dev python3-numpy python3-wheel\		
	libcupti-dev git patch\
	openjdk-8-jdk

RUN echo &quot;deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8&quot; | tee /etc/apt/sources.list.d/bazel.list
RUN curl https://bazel.build/bazel-release.pub.gpg | apt-key add -
RUN apt-get update &amp;amp;&amp;amp; apt-get install bazel

RUN pip install -upgrade pip
RUN pip install setuptools six numpy wheel jupyter

RUN pip3 install -upgrade pip
RUN pip3 install setuptools six numpy wheel jupyter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 05 Oct 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/deep-learning/2017/10/05/tensorflow-install.html</link>
        <guid isPermaLink="true">http://localhost:4000/deep-learning/2017/10/05/tensorflow-install.html</guid>
        
        
        <category>deep-learning</category>
        
      </item>
    
      <item>
        <title>using gdb inside docker container</title>
        <description>&lt;p&gt;Docker container내에서 gdb로 debugging을 할때 설정된 break point에서 break가 걸리지 않는 경우가 있다.
docker container에서 정상적인 gdb사용을 위해서는 아래 옵션을 추가해서 docker container를 실행해야 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run --security-opt seccomp:unconfined
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Sat, 16 Sep 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/emacs/2017/09/16/gdb-inside-docker.html</link>
        <guid isPermaLink="true">http://localhost:4000/emacs/2017/09/16/gdb-inside-docker.html</guid>
        
        
        <category>emacs</category>
        
      </item>
    
      <item>
        <title>register Cerificates manually in ubuntu</title>
        <description>&lt;p&gt;사내에서는 웹사이트 인증서를 따로 설치해야 할 필요가 있다&lt;/p&gt;

&lt;p&gt;인증서 import 기능을 제공하는 브라우저에서는, 해당 메뉴를 사용하면 되고
그렇지 않은 경우는 시스템에 등록해야 한다.&lt;/p&gt;

&lt;p&gt;ubuntu에서는 아래 command line 명령을 사용해 등록한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;copy certificate files to /usr/local/share/ca-certificates&lt;br /&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo cp &amp;lt;path-to-ca-file&amp;gt; /usr/local/share/ca-certificates
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;register&lt;br /&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo update-ca-certificates
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sun, 10 Sep 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/dev-common/2017/09/10/ubuntu-ca-install.html</link>
        <guid isPermaLink="true">http://localhost:4000/dev-common/2017/09/10/ubuntu-ca-install.html</guid>
        
        
        <category>dev-common</category>
        
      </item>
    
      <item>
        <title>latex에서 한글 밎 다양한 font 사용하기</title>
        <description>&lt;p&gt;latex 기본 폰트는 읽을때 심적으로 부담을 가지게 한다. 적어도 나에게는 그렇다. 텍스트만으로 가득한 문서에나 어울릴 것 같은 폰트 같이 느껴진다. 그래서, latex으로 만들 문서를 좀더 읽기 편하게 만들어 주기 위한 폰트를 사용할 수 있는 방법을 다음과 같이 기록해 둔다.&lt;/p&gt;

&lt;h1 id=&quot;install-extra-font&quot;&gt;install extra font&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install texlive-fonts-extra```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;type-in-korean&quot;&gt;type in Korean&lt;/h1&gt;

&lt;p&gt;Latex 문서는 가능하면 영어로만 작성하려고 하지만, 문서의 목적 상 한글을 사용할 수 밖에 없는 경우도 많다.
아래는 Latex에서 한글 입력이 가능하도록 하는 방법이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install ko.tex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음 구문을 latex문서에 삽입하면 한글을 사용할 수 있다.&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\usepackage{kotex}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 10 Sep 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/dev-common/2017/09/10/latex-fonts.html</link>
        <guid isPermaLink="true">http://localhost:4000/dev-common/2017/09/10/latex-fonts.html</guid>
        
        
        <category>dev-common</category>
        
      </item>
    
      <item>
        <title>copying full path of current file in emacs</title>
        <description>&lt;p&gt;copy below function into &lt;strong&gt;.emacs.d/init.el&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(defun clip-file-path ()
  &quot;Copy the current buffer file name to the clipboard.&quot;
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new filename)
      (message &quot;Copied buffer file name '%s' to the clipboard.&quot; filename))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Sun, 10 Sep 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/emacs/2017/09/10/emacs-clip-file-path.html</link>
        <guid isPermaLink="true">http://localhost:4000/emacs/2017/09/10/emacs-clip-file-path.html</guid>
        
        
        <category>emacs</category>
        
      </item>
    
  </channel>
</rss>
