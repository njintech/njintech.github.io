<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tesigners</title>
    <description></description>
    <link>http://tesigner.github.io/</link>
    <atom:link href="http://tesigner.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 21 Sep 2017 05:08:26 +0900</pubDate>
    <lastBuildDate>Thu, 21 Sep 2017 05:08:26 +0900</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>using gdb inside docker container</title>
        <description>&lt;p&gt;Docker container내에서 gdb로 debugging을 할때 설정된 break point에서 break가 걸리지 않는 경우가 있다.
docker container에서 정상적인 gdb사용을 위해서는 아래 옵션을 추가해서 docker container를 실행해야 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run --security-opt seccomp:unconfined
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Sat, 16 Sep 2017 00:00:00 +0900</pubDate>
        <link>http://tesigner.github.io/emacs/2017/09/16/gdb-inside-docker.html</link>
        <guid isPermaLink="true">http://tesigner.github.io/emacs/2017/09/16/gdb-inside-docker.html</guid>
        
        
        <category>emacs</category>
        
      </item>
    
      <item>
        <title>register Cerificates manually in ubuntu</title>
        <description>&lt;p&gt;사내에서는 웹사이트 인증서를 따로 설치해야 할 필요가 있다&lt;/p&gt;

&lt;p&gt;인증서 import 기능을 제공하는 브라우저에서는, 해당 메뉴를 사용하면 되고
그렇지 않은 경우는 시스템에 등록해야 한다.&lt;/p&gt;

&lt;p&gt;ubuntu에서는 아래 command line 명령을 사용해 등록한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;copy certificate files to /usr/local/share/ca-certificates&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;
$ sudo cp &amp;lt;path-to-ca-file&amp;gt; /usr/local/share/ca-certificates
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;register&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;
$ sudo update-ca-certificates
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sun, 10 Sep 2017 00:00:00 +0900</pubDate>
        <link>http://tesigner.github.io/dev-common/2017/09/10/ubuntu-ca-install.html</link>
        <guid isPermaLink="true">http://tesigner.github.io/dev-common/2017/09/10/ubuntu-ca-install.html</guid>
        
        
        <category>dev-common</category>
        
      </item>
    
      <item>
        <title>latex에서 한글 밎 다양한 font 사용하기</title>
        <description>&lt;p&gt;latex 기본 폰트는 읽을때 심적으로 부담을 가지게 한다. 적어도 나에게는 그렇다. 텍스트만으로 가득한 문서에나 어울릴 것 같은 폰트 같이 느껴진다. 그래서, latex으로 만들 문서를 좀더 읽기 편하게 만들어 주기 위한 폰트를 사용할 수 있는 방법을 다음과 같이 기록해 둔다.&lt;/p&gt;

&lt;h1 id=&quot;install-extra-font&quot;&gt;install extra font&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install texlive-fonts-extra```
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;type-in-korean&quot;&gt;type in Korean&lt;/h1&gt;

&lt;p&gt;Latex 문서는 가능하면 영어로만 작성하려고 하지만, 문서의 목적 상 한글을 사용할 수 밖에 없는 경우도 많다.
아래는 Latex에서 한글 입력이 가능하도록 하는 방법이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install ko.tex
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;다음 구문을 latex문서에 삽입하면 한글을 사용할 수 있다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;
\usepackage{kotex}
&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 10 Sep 2017 00:00:00 +0900</pubDate>
        <link>http://tesigner.github.io/dev-common/2017/09/10/latex-fonts.html</link>
        <guid isPermaLink="true">http://tesigner.github.io/dev-common/2017/09/10/latex-fonts.html</guid>
        
        
        <category>dev-common</category>
        
      </item>
    
      <item>
        <title>copying full path of current file in emacs</title>
        <description>&lt;p&gt;copy below function into &lt;strong&gt;.emacs.d/init.el&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(defun clip-file-path ()
  &quot;Copy the current buffer file name to the clipboard.&quot;
  (interactive)
  (let ((filename (if (equal major-mode &#39;dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new filename)
      (message &quot;Copied buffer file name &#39;%s&#39; to the clipboard.&quot; filename))))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Sun, 10 Sep 2017 00:00:00 +0900</pubDate>
        <link>http://tesigner.github.io/emacs/2017/09/10/emacs-clip-file-path.html</link>
        <guid isPermaLink="true">http://tesigner.github.io/emacs/2017/09/10/emacs-clip-file-path.html</guid>
        
        
        <category>emacs</category>
        
      </item>
    
      <item>
        <title>ubuntu에서 세벌식 입력기 사용하기</title>
        <description>&lt;p&gt;우분투에서 세벌식 한글 입력기를 사용하기 위한 방법이다.&lt;br /&gt;
한글 사용을 위한 ibus-hangul설치가 된 환경을 전제로 한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;세벌식 자판중에서는 최종보다는 신세벌식 2012를 사용하기를 권장한다.&lt;/p&gt;

&lt;h1 id=&quot;install&quot;&gt;install&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo add-apt-repository -y ppa:createsc/3beol
$ sudo apt-get update -y
$ sudo apt-get upgrade -y
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;remove&quot;&gt;remove&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install -y ppa-purge
$ sudo ppa-purge ppa:createsc/3beol
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 10 Sep 2017 00:00:00 +0900</pubDate>
        <link>http://tesigner.github.io/dev-common/2017/09/10/3beol-linux.html</link>
        <guid isPermaLink="true">http://tesigner.github.io/dev-common/2017/09/10/3beol-linux.html</guid>
        
        
        <category>dev-common</category>
        
      </item>
    
      <item>
        <title>Tips for Docker Install and Usage</title>
        <description>&lt;h1 id=&quot;install&quot;&gt;Install&lt;/h1&gt;
&lt;p&gt;reference: &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-16-04&quot;&gt;https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-16-04&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;add the GPG key for the official Docker repository to the system:&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;add docker repository&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;$sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;update the package database&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;$sudo apt-get update&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;make sure to install from the Docker repo instead of the default Ubuntu 16.04 repo&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ apt-cache policy docker-ce&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;install docker&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo apt-get install -y docker-ce&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;executing-without-sudo&quot;&gt;Executing without sudo&lt;/h1&gt;
&lt;p&gt;by default, running the docker command requires root privileges
instead create &lt;strong&gt;docker&lt;/strong&gt; group&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;add user to &lt;strong&gt;docker&lt;/strong&gt; group&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo usermod -aG docker ${USER}&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;relogin&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ su - ${USER}&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;confirm&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ id -nG&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;saveload-docker-image&quot;&gt;Save/Load docker image&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;add new image with offline&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ docker load --input &amp;lt;image file&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;save image to file&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ docker save --output &amp;lt;filename&amp;gt; &amp;lt;image name&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;creating-docker-image-with-user-not-root&quot;&gt;Creating docker image with user (not root)&lt;/h1&gt;
&lt;p&gt;개발환경용으로 사용하기 위해서는 사용자 계정으로 docker container를 실행해야 한다.
이때, host의 사용자 계정에 해당하는 계정이 image에 없으면,  root로 실행해서,  host  사용자와 동일한 UID를 가지는 사용자 계정을 만든 후에 커밋을 해야한다.
꼭 gosu를 사용해야하는 지는 알수 없지만, gosu를 사용해서, container 실행시 사용자 계정을 만들고, 해당 계정으로 로그인하는 docker image를 만들 수 있다.&lt;/p&gt;

&lt;p&gt;Reference: &lt;a href=&quot;https://denibertovic.com/posts/handling-permissions-with-docker-volumes/&quot;&gt;https://denibertovic.com/posts/handling-permissions-with-docker-volumes/&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Dockerfile&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        FROM baseimage
	
        ENV http_proxy ???
        ENV https_proxy ???
        ENV HOSTNAME=docker

        RUN groupadd developer        
        RUN apt-get update &amp;amp;&amp;amp; apt-get -y --no-install-recommends install \
            ca-certificates \
            curl \
            sudo
    
        RUN gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4
        RUN curl -o /usr/local/bin/gosu -SL &quot;https://github.com/tianon/gosu/releases/download/1.4/gosu-$(dpkg --print-architecture)&quot; \
            &amp;amp;&amp;amp; curl -o /usr/local/bin/gosu.asc -SL &quot;https://github.com/tianon/gosu/releases/download/1.4/gosu-$(dpkg --print-architecture).asc&quot; \
            &amp;amp;&amp;amp; gpg --verify /usr/local/bin/gosu.asc \
            &amp;amp;&amp;amp; rm /usr/local/bin/gosu.asc \
            &amp;amp;&amp;amp; chmod +x /usr/local/bin/gosu
    
        COPY entrypoint.sh /usr/local/bin/entrypoint.sh
	
        ENTRYPOINT [&quot;/usr/local/bin/entrypoint.sh&quot;]
        CMD [&quot;bin/bash&quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;entrypoint.sh&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        &lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
    
        &lt;span class=&quot;nv&quot;&gt;USER_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LOCAL_USER_ID&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;9001&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
    
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Start with UID : &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$USER_ID&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; ! &lt;span class=&quot;nv&quot;&gt;$USER_ID&lt;/span&gt; -eq 0]; &lt;span class=&quot;k&quot;&gt;then
            &lt;/span&gt;getent passwd &lt;span class=&quot;nv&quot;&gt;$USER_ID&lt;/span&gt; &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
            &lt;span class=&quot;nv&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
    	
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; ! &lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt; -eq 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
                &lt;/span&gt;useradd --shell /bin/bash -u &lt;span class=&quot;nv&quot;&gt;$USER_ID&lt;/span&gt; -o -c &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; -d /home/user -M user-&lt;span class=&quot;nv&quot;&gt;$USER_ID&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;user-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$USER_ID&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; ALL=(ALL) NOPASSWD: ALL&quot;&lt;/span&gt; &amp;gt;&amp;gt; etc/sudoers
            &lt;span class=&quot;k&quot;&gt;fi
	    	&lt;/span&gt;usermod -a -G developer user-&lt;span class=&quot;nv&quot;&gt;$USER_ID&lt;/span&gt;
	    	
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; ! -e /home/user &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
                &lt;/span&gt;mkdir -p /home/user
            &lt;span class=&quot;k&quot;&gt;fi
            
            &lt;/span&gt;chown :developer /home/user
            chmod 775 /home/user
            
            &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/user
    	
            &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; /usr/local/bin/gosu user-&lt;span class=&quot;nv&quot;&gt;$USER_ID&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;fi
    
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;create image using Dockerfile&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ docker build -t &amp;lt;image_name&amp;gt; &amp;lt;Dockerfile path&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;execute as a specific user&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ docker run -it -e LOCAL_USER_ID=`id -u $USER` myimage&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;migration&quot;&gt;Migration&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;change uid&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ usermod -u &amp;lt;new id&amp;gt; &amp;lt;id&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;change permission outside user home&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ find / -uid &amp;lt;old id&amp;gt; -exec chown -R &amp;lt;id&amp;gt; {} \;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Wed, 06 Sep 2017 00:00:00 +0900</pubDate>
        <link>http://tesigner.github.io/dev/common/2017/09/06/docker-memo.html</link>
        <guid isPermaLink="true">http://tesigner.github.io/dev/common/2017/09/06/docker-memo.html</guid>
        
        
        <category>dev</category>
        
        <category>common</category>
        
      </item>
    
      <item>
        <title>Emacs configuration</title>
        <description>&lt;p&gt;이 포스팅은 내가 사용하는 Emacs의 기능들의 설치 및 설정 방법에 대한 기록이다.&lt;br /&gt;
현재 사용중인 Emacs의 버전은 24.5.1이며, mac/ubuntu에서 사용중이다.&lt;br /&gt;
따라서, mac과 ubuntu에 특화된 내용이 혼재할 수 있다.&lt;/p&gt;

&lt;h1 id=&quot;proxy&quot;&gt;proxy&lt;/h1&gt;

&lt;p&gt;방화벽 내부에서 MELPA를 사용하려면 proxy설정이 필요하다.&lt;br /&gt;
init.el에 다음의 proxy설정을 추가한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(setq url-proxy-services
   &#39;((&quot;no_proxy&quot; . &quot;^\\(localhost\\|10.*\\)&quot;)
     (&quot;http&quot; . &quot;proxy.com:8080&quot;)
     (&quot;https&quot; . &quot;proxy.com:8080&quot;)))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;no_proxy는 regex matching으로 표현된다.&lt;/p&gt;

&lt;h1 id=&quot;helm-install-and-configuration&quot;&gt;helm install and configuration&lt;/h1&gt;

&lt;p&gt;vim에서는 ctags, cscope조합을 사용했는데, code browser로 helm을 사용한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;mac&lt;br /&gt;
mac에서는 init.el의 command로 MELPA를 이용해 설치한다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(require &#39;setup-helm)
(require &#39;setup-helm-gtags))
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ubuntu&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;
apt-get install elpa-helm
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;etc-settings-in-emacsdinitel&quot;&gt;etc. settings in .emacs.d/init.el&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;enable auto revert buffer&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(global-auto-revert-mode 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;file name with full path on frame&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(setq-default frame-title-format &quot;%b (%f)&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;enable menubar by default&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(menu-bar-mode t)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;control transparency&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ;;(set-frame-parameter (selected-frame) &#39;alpha &#39;(&amp;lt;active&amp;gt; . &amp;lt;inactive&amp;gt;))
 ;;(set-frame-parameter (selected-frame) &#39;alpha &amp;lt;both&amp;gt;)
 (set-frame-parameter (selected-frame) &#39;alpha &#39;(85 . 50))
 (add-to-list &#39;default-frame-alist &#39;(alpha . (85 . 50)))
 
 (defun toggle-transparency ()
   (interactive)
   (let ((alpha (frame-parameter nil &#39;alpha)))
     (set-frame-parameter
      nil &#39;alpha
      (if (eql (cond ((numberp alpha) alpha)
                     ((numberp (cdr alpha)) (cdr alpha))
                     ;; Also handle undocumented (&amp;lt;active&amp;gt; &amp;lt;inactive&amp;gt;) form.
                     ((numberp (cadr alpha)) (cadr alpha)))
               100)
          &#39;(85 . 50) &#39;(100 . 100)))))
 (global-set-key (kbd &quot;C-c t&quot;) &#39;toggle-transparency)
 
  ;; Set transparency of emacs
 (defun transparency (value)
   &quot;Sets the transparency of the frame window. 0=transparent/100=opaque&quot;
   (interactive &quot;nTransparency Value 0 - 100 opaque:&quot;)
   (set-frame-parameter (selected-frame) &#39;alpha value))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;# how to import user configuration file(.el)&lt;br /&gt;
.emacs.d/init.el:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(defconst user-init-dir
	(cond ((boundp &#39;user-emacs-directory)
		   user-emacs-directory)
		  ((boundp &#39;user-init-directory)
		   user-init-directory)
		  (t &quot;~/.emacs.d/&quot;)))

(defun load-user-file (file)
  (interactive &quot;f&quot;)
  &quot;Load a file in current user&#39;s configuration directory&quot;
  (load-file (expand-file-name file user-init-dir)))
  
(load-user-file &quot;personal.el&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;theme&quot;&gt;theme&lt;/h1&gt;
&lt;p&gt;흰색 바탕의 심플한 theme중 괜찮은 theme&lt;br /&gt;
&lt;a href=&quot;https://github.com/owainlewis/emacs-color-themes&quot;&gt;sublime-theme:McCarthy&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;M-x package-install &amp;lt;RET&amp;gt; sublime-themes
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 06 Sep 2017 00:00:00 +0900</pubDate>
        <link>http://tesigner.github.io/emacs/2017/09/06/EmacsForMe.html</link>
        <guid isPermaLink="true">http://tesigner.github.io/emacs/2017/09/06/EmacsForMe.html</guid>
        
        
        <category>emacs</category>
        
      </item>
    
      <item>
        <title>Docker 사용에 대한 단상</title>
        <description>&lt;p&gt;서비/서비스 구성이 아닌, 개발환경으로 Docker를 사용해보려고 시도를 해봤다.
결론을 먼저 말하면, 그다지 매력적이지는 않다는 것이다. 물론 내 개인의 생각이다.
매력적이지 않다는 것은, 만들어진 이미지를 실행만 시키면, 어느 머신에서든 똑같은 환경으로 사용하기가 힘들다는 것이다. 물론, 개발환경으로써의 사용하는 경우를 말한다.&lt;/p&gt;

&lt;p&gt;처음 접한 것은 Tensorflow를 docker용 image 로 다운받았을 때였다. 그래서 자연스럽게 개발환경으로써 Docker를 받아들였다. 그러다가, 개발환경을 백업 및 일관성을 위한 팀내 공유를 위해 사용해보면 좋겠다라는 생각을 하고
실효성 테스트를 해봤다.&lt;/p&gt;

&lt;p&gt;문제가 되는 부분은 딱 하나였다. Volume을 사용하는 경우의  계정 콘트롤.&lt;/p&gt;

&lt;p&gt;Docker를 사용하다보면, Volume interface를 통해서 Host의 storage를 사용하게 된다.
그 경우는 대부분 data base와 패키지 혹은 소스파일들이다. 개발환경일 경우에는, 개발자의 소스파일들이 된다.&lt;/p&gt;

&lt;p&gt;문제는, Host와 Docker image의 계정정보(UID) 가 일치하지 않는다는데 있다.
게다가, Docker context에서 만드는 파일들은, Docker context의 계정 권한으로 만들어진다. Host에서 이 파일들은 Docker context user의 UID에 상응하는 Host상의 user 권한으로 인식된다.&lt;/p&gt;

&lt;p&gt;따라서, 올바르게 Docker를 사용하려면, 둘 사이의 계정 정보를 일치시키는 작업이 필요하다.&lt;/p&gt;

&lt;p&gt;서비스를 구성하는 경우에는, Docker image를 만들때, Host의 계정 상황에 맞춰서, 필요한 계정을 만들고, 해당 계정으로 서비스들을 설치하면 된다.
하지만, 개발환경의 경우 필요한 패키지를 수시로 설치, 업데이트 해야하고, 그때마다 이미지를 새로 만들고, 계정정보 매칭하고 해야하는 배포작업을 해야한다. 한마디로, 또 다른 일이 생기는 것이다.&lt;/p&gt;

&lt;p&gt;개발환경으로 Docker를 사용하면 좋은 경우는, 남의 서버에 기생하면서 특정 개발환경을 사용하려고 할때, 혹은, 검증 안된 개발환경을 새로 도입할때 테스트용으로 사용하는 경우에사용하는 것이 좋겠다는 것이 나의 결론이다.&lt;/p&gt;

&lt;p&gt;이상으로 2일동안의 도커 실효성 테스트 후, 도커에 대한 단상이었다.&lt;/p&gt;

</description>
        <pubDate>Wed, 16 Aug 2017 00:00:00 +0900</pubDate>
        <link>http://tesigner.github.io/essay/2017/08/16/EssayOnDockerUsage.html</link>
        <guid isPermaLink="true">http://tesigner.github.io/essay/2017/08/16/EssayOnDockerUsage.html</guid>
        
        
        <category>essay</category>
        
      </item>
    
      <item>
        <title>Docker ubuntu 16.04에서 Caffe 설치</title>
        <description>&lt;p&gt;1.package dependencies&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler
$sudo apt-get install --no-install-recommends libboost-all-dev
$sudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev libatlas-base-dev
$sudo apt-get install cmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2.caffe 소스 받기&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$git clone https://github.com/BVLC/caffe.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;3.compile&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$mkdir build
$cd build
$cmake ..
$make all -j8
$make install
$make runtest
$make pycaffe
$make distribute
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;env
export PYTHONPATH=$PYTHONPATH:/path/to/caffe-master/python&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;5.commit docker image&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;변경된 docker container를 새로운 docker image에 commit한다.

$docker commit &amp;lt;container ID&amp;gt; &amp;lt;NewImageName&amp;gt;

이때, NewImageName은 현재 실행중인 container의 image여도 된다.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 07 Aug 2017 00:00:00 +0900</pubDate>
        <link>http://tesigner.github.io/deep-learning/2017/08/07/Caffe-Install.html</link>
        <guid isPermaLink="true">http://tesigner.github.io/deep-learning/2017/08/07/Caffe-Install.html</guid>
        
        
        <category>deep-learning</category>
        
      </item>
    
  </channel>
</rss>
